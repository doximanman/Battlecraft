using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Newtonsoft.Json;
using System.IO;
using Newtonsoft.Json.Linq;
using System;
using System.Threading.Tasks;

public static class WorldSaver
{
    public static string fileName = "world.json";
    public static string defaultWorldPath = Path.Combine(Application.streamingAssetsPath, "defaults", fileName);
    public static string defaultPlayerName = "player1";

    public static void SaveWorldDataPlain(string worldData, bool defaultWorld = false)
    {
        string playerName = PlayerPrefs.GetString("PlayerName", defaultPlayerName);

        // path is /PlayerName/world.save
        // or /defaults/world.save as the default world
        string path = Path.Combine(Application.persistentDataPath, playerName, fileName);

        if (defaultWorld)
            path = defaultWorldPath;

        // create the folders in the path if it doesnt exist
        Directory.CreateDirectory(Path.GetDirectoryName(path));

        // write the json of the data
        File.WriteAllText(path, worldData);
    }

    public static string LoadWorldDataPlain(bool defaultWorld = false)
    {
        string playerName = PlayerPrefs.GetString("PlayerName", defaultPlayerName);

        // path is /PlayerName/world.save
        // or /defaults/world.save as the default world, OR
        // if the world doesnt have data saved
        string path = Path.Combine(Application.persistentDataPath, playerName, fileName);

        if (defaultWorld || !File.Exists(path))
            path = defaultWorldPath;

        return File.ReadAllText(path);
    }

    // asyncronous versions
    // only difference is the file operation
    public static async Task SaveWorldDataPlainAsync(string worldData, bool defaultWorld = false)
    {
        string playerName = PlayerPrefs.GetString("PlayerName", defaultPlayerName);
        string path = Path.Combine(Application.persistentDataPath, playerName, fileName);
        if (defaultWorld)
            path = defaultWorldPath;
        // create directory asyncronously
        await Task.Run(() => { Directory.CreateDirectory(Path.GetDirectoryName(path)); });
        await File.WriteAllTextAsync(path, worldData);
    }

    public static async Task<string> LoadWorldDataPlainAsync(bool defaultWorld = false)
    {
        string playerName = PlayerPrefs.GetString("PlayerName", defaultPlayerName);
        string path = Path.Combine(Application.persistentDataPath, playerName, fileName);
        if (defaultWorld || !File.Exists(path))
            path = defaultWorldPath;

        return await File.ReadAllTextAsync(path);
    }

    public static async Task SaveWorldDataObjectAsync(WorldData data, bool defaultWorld = false)
    {
        string dataString = SerializeWorldData(data);
        await SaveWorldDataPlainAsync(dataString, defaultWorld);
    }

    public static async Task<WorldData> LoadWorldDataObjectAsync(bool defaultWorld = false)
    {
        string jsonText = await LoadWorldDataPlainAsync(defaultWorld);
        // remove timestamp from object
        return DeserializeWorldData(jsonText);
    }

    /// <summary>
    /// from serialized form generated by the serialize function
    /// into worlddata.
    /// </summary>
    public static WorldData DeserializeWorldData(string data)
    {
        JObject jsonWithTime = JObject.Parse(data);
        JObject dataJson = jsonWithTime["data"] as JObject;
        return WorldData.Load(dataJson);
    }

    /// <summary>
    /// serialize to string, while adding a timestamp.
    /// </summary>
    public static string SerializeWorldData(WorldData data)
    {
        JObject serializedData = WorldData.Save(data);
        // add timestamp to object
        JObject json = new()
        {
            ["data"] = serializedData,
            ["timestamp"] = DateTime.UtcNow.ToString("o")
        };
        return json.ToString();
    }
}
